// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
enum Sex {
  Man
  Woman
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Photo {
  id        Int      @id @default(autoincrement())
  imagePath String
  Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int?
}

model Profile {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  firstName String
  lastName  String
  bio       String?  @db.VarChar(150)
  sex       Sex
  tags      String[]
  course    String
  photos    Photo[]

  mainFriendId Int?
  mainFriend   Profile?  @relation("MainFriend", fields: [mainFriendId], references: [id])
  friends      Profile[] @relation("MainFriend")

  randomMeetingPool   RandomMeetingPool @relation(fields: [randomMeetingPoolId], references: [id])
  randomMeetingPoolId Int

  matchingPoolMain      MatchingPool[] @relation("MatchingPoolMain")
  matchingPoolSecondary MatchingPool[] @relation("MatchingPoolSecondary")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  banned    Boolean  @default(false)
  deleted   Boolean  @default(false)
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  profile  Profile?
}

model RandomMeetingPool {
  id        Int       @id @default(autoincrement())
  profiles  Profile[]
  time      DateTime  @default(now())
  place     String    @default("Online")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model MatchingPool {
  id               Int      @id @default(autoincrement())
  profile          Profile  @relation("MatchingPoolMain", fields: [profileId], references: [id], onDelete: Cascade)
  profileId        Int
  possibleFriend   Profile  @relation("MatchingPoolSecondary", fields: [possibleFriendId], references: [id], onDelete: Cascade)
  possibleFriendId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([profileId, possibleFriendId])
}
