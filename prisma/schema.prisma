// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum universityEnum {
  demo
  // TODO: parse this shit https://en.misis.ru/academics/undergradute/
}

enum CourseEnum {
  Bachelor
  Master
  phd
}

enum TagsEnum {
  IT
  Design
  Linguistics
  Physics
  Hobby
  Music
  Animals
  Programming
  WebDevelopment
  MobileDevelopment
  DataAnalysis
  ArtificialIntelligence
  ProgrammingLanguages
  GraphicDesign
  Photography
  Literature
  Sports
  Travel
  Cooking
  Ecology
  Psychology
  Medicine
  Business
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Photo {
  id        Int    @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  imagePath String
}

model User {
  id                    Int               @id @default(autoincrement())
  tgUsername            String            @unique
  password              String
  firstName             String            
  lastName              String
  bio                   String?           @db.VarChar(150)
  tags                  String[]
  university            universityEnum
  course                CourseEnum       @default(Bachelor)
  mainFriendId          Int?
  mainFriend            User?             @relation("MainFriend", fields: [mainFriendId], references: [id])
  friends               User[]            @relation("MainFriend")
  photos                Photo[]
  randomMeetingPool     RandomMeetingPool @relation(fields: [randomMeetingPoolId], references: [id])
  randomMeetingPoolId   Int
  matchingPoolMain      MatchingPool[]    @relation("MatchingPoolMain")
  matchingPoolSecondary MatchingPool[]    @relation("MatchingPoolSecondary")
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  banned                Boolean           @default(false)
  deleted               Boolean           @default(false)
}

model RandomMeetingPool {
  id        Int      @id @default(autoincrement())
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchingPool {
  id               Int      @id @default(autoincrement())
  user             User     @relation("MatchingPoolMain", fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  possibleFriend   User     @relation("MatchingPoolSecondary", fields: [possibleFriendId], references: [id], onDelete: Cascade)
  possibleFriendId Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
